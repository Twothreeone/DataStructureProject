<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>60</y>
      <w>230</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
-
# data : Type
-
+ Node() : constructor
+ Node(Type data) : constructor
+ getData() : Type
+ setData(Type data) : void
bg=green
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>220</x>
      <y>110</y>
      <w>130</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;110.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>330</x>
      <y>0</y>
      <w>310</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>BinaryTreeNode&lt;Type&gt;
-
- root : BinaryTreeNode&lt;Type&gt; *
- left : BinaryTreeNode&lt;Type&gt; *
- right : BinaryTreeNode&lt;Type&gt; *
-
+ BinaryTreeNode() : constructor
+ BinaryTreeNode(Type data) : constructor
+ getRoot() : BinaryTreeNode&lt;Type&gt; *
+ getLeft() : BinaryTreeNode&lt;Type&gt; *
+ getRight() : BinaryTreeNode&lt;Type&gt; *
+ setRoot(BinaryTreeNode&lt;Type&gt; *) : void
+ setLeft(BinaryTreeNode&lt;Type&gt; *) : void
+ setRight(BinaryTreeNode&lt;Type&gt; *) : void
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>310</y>
      <w>230</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>/Tree&lt;Type&gt;/
-
# root : BinaryTreeNode&lt;Type&gt;
-
+ getSize() : int
+ getHeight() : int
+ isComplete() : bool
+ isBalanced() : bool
+ insert(Type) : void
+ contains(Type) : bool
+ removed(Type) : void
+ inOrderTraversal() : void
+ preOrderTraversal() : void
+ postOrderTraversal() : void
bg=cyan</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>290</x>
      <y>250</y>
      <w>570</w>
      <h>380</h>
    </coordinates>
    <panel_attributes>bg=magenta
BinarySearchTree&lt;Type&gt;
-
+ BinarySearchTree() : Constructor
+ ~BinarySearchTree() : Destructor
+ getSize() : int
+ getHeight() : int
+ isComplete() : bool
+ isBalanced() : bool
# calculateSize(BinaryTreeNode&lt;Type&gt; * startNode) : int
# calculateHeight(BinaryTreeNode&lt;Type&gt; * startNode) : int
# isBalanced(BinaryTreeNode&lt;Type&gt; * startNode) : bool
# isComplete(BinaryTreeNode&lt;Type&gt; * startNode, int index, int size) : bool
+ insert(Type) : void
+ contains(Type) : bool
+ remove(Type) : void
# removeNode(BinaryTreeNode&lt;Type&gt; * removeMe) : void
+ inOrderTraversal() : void
+ preOrderTraversal() : void
+ postOrderTraversal() : void
# inOrderTraversal(BinaryTreeNode&lt;Type&gt; * inStart) : void
# preOrderTraversal(BinaryTreeNode&lt;Type&gt; * preStart) : void
# postOrderTraversal(BinaryTreeNode&lt;Type&gt; * postStart) : void
# getRightMostChild(BinaryTreeNode&lt;Type&gt; * current) : BinaryTreeNode&lt;Type&gt; *
# getLeftMostChild(BinaryTreeNode&lt;Type&gt; * current) : BinaryTreeNode&lt;Type&gt; *</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>220</x>
      <y>410</y>
      <w>90</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;70.0;10.0</additional_attributes>
  </element>
</diagram>
